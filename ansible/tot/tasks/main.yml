---
- name: nginx key
  apt_key: url=http://nginx.org/keys/nginx_signing.key
- name: nginx repo
  apt_repository: repo="deb http://nginx.org/packages/ubuntu/ wily nginx"
- name: install system packages
  apt: pkg={{item}} update_cache=yes
  with_items:
      - build-essential
      - git
      - python-pycurl
      - python-boto
      - libpq-dev
      - unzip
      - gdal-bin
      - python3
      - python3-dev
      - virtualenv
      - uwsgi
      - nginx
      - uwsgi-plugin-python3
      - libxslt-dev
      - poppler-utils
- name: make project dir
  file: path=/home/tot state=directory
- name: add project user
  user: name=tot home=/home/tot shell=/bin/bash state=present
- name: chown user directory
  file: path=/home/tot owner=tot
- name: add user subdirectories
  file: path=/home/tot/{{item}} owner=tot state=directory
  with_items:
    - logs
    - data
  sudo_user: "tot"
- name: add env_vars for project user
  template: src=env_vars.j2 dest=/home/tot/env_vars mode=640
  sudo_user: "tot"
- name: create virtualenv
  command: virtualenv -p python3.4 /home/tot/virt{{ ansible_date_time.date }}-{{ ansible_date_time.hour }}-{{ ansible_date_time.minute }}
  sudo_user: "tot"
  notify:
    - restart django-application
- name: checkout project directories
  git: repo=https://github.com/jamesturk/tot.git dest=/home/tot/src/tot
  sudo_user: "tot"
  notify:
    - restart django-application
- name: add checkouts to python path
  lineinfile: dest=/home/tot/virt{{ansible_date_time.date }}-{{ ansible_date_time.hour }}-{{ ansible_date_time.minute }}/lib/python3.4/site-packages/checkouts.pth create=yes state=present line=/home/tot/src/tot
  sudo_user: "tot"
- name: install requirements
  pip: requirements=/home/tot/src/tot/requirements.txt virtualenv=/home/tot/virt{{ansible_date_time.date }}-{{ ansible_date_time.hour }}-{{ ansible_date_time.minute }}
  sudo_user: "tot"
  notify:
    - restart django-application
- name: link virtualenv
  file: src=/home/tot/virt{{ ansible_date_time.date }}-{{ ansible_date_time.hour }}-{{ ansible_date_time.minute }} dest=/home/tot/virt state=link
- name: write uwsgi template
  template: src=uwsgi.j2 dest=/etc/uwsgi/apps-enabled/tot.ini
  notify:
    - restart django-application
- name: make certs dir
  file: path=/etc/nginx/certs/ state=directory
- name: copy ssl cert over
  copy: src=ec2/tot.crt dest=/etc/nginx/certs/tot.crt mode=0644
- name: copy ssl key over
  copy: src=ec2/tot.key dest=/etc/nginx/certs/tot.key mode=0644
- name: remove nginx default config
  file: path=/etc/nginx/conf.d/default.conf state=absent
- name: generate dh params
  command: openssl dhparam -out /etc/nginx/certs/dhparams.pem 2048 creates=/etc/nginx/certs/dhparams.pem
- name: write nginx template
  template: src=nginx.j2 dest=/etc/nginx/conf.d/tot.conf
  notify:
    - restart nginx
- name: ensure nginx is running and starts on boot
  service: name=nginx state=restarted enabled=yes
- name: generate new relic config
  command: /home/tot/virt/bin/newrelic-admin generate-config {{ newrelic_key }} /home/tot/src/tot/tot/newrelic.ini creates=/home/tot/src/tot/tot/newrelic.ini
- name: start uwsgi
  service: name=uwsgi state=started args=tot
- name: collectstatic
  command: /home/tot/virt/bin/python manage.py collectstatic --settings=tot.settings --noinput chdir=/home/tot/src/tot
  environment: django_environment

# cron
- name: write run-scrapers.sh
  template: src=run-scrapers.sh dest=/home/tot/ mode="a+x"
- name: add cron
  cron: name="run scrapers" minute="0" hour="3,12,19" job="/home/tot/run-scrapers.sh"
  sudo_user: "tot"
